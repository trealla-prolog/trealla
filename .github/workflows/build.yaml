  name: Build

  on:
    create:
      tags:
    push:
      branches:
        - main
    pull_request:
    release:
      types: [created]

  jobs:
    build:
      name: Native
      runs-on: ${{ matrix.os }}
      strategy:
        fail-fast: false
        matrix:
          os:
            - ubuntu-latest
            - macos-latest
      steps:
        - uses: actions/checkout@v1
        - name: Install deps (Linux)
          run: |
            sudo apt-get install libreadline-dev xxd libffi-dev libssl-dev
          if: matrix.os == 'ubuntu-latest'
        - name: Install deps (macOS)
          run: |
            brew install readline vim libffi openssl make
            echo "$(brew --prefix)/opt/make/libexec/gnubin" >> $GITHUB_PATH
          if: matrix.os == 'macos-latest'
        - name: Build
          run: make release
        - name: Test
          run: make test
        - name: Upload artifacts
          uses: actions/upload-artifact@v3
          with:
            name: ${{ format('tpl-{0}-{1}', runner.os, runner.arch) }}
            path: |
              tpl
              LICENSE
              ATTRIBUTION

    windows:
      name: Windows
      runs-on: windows-latest
      defaults:
        run:
          shell: msys2 {0}
      steps:
        - uses: msys2/setup-msys2@v2
        - uses: actions/checkout@v1
        - name: Install deps (Linux)
          run: |
            pacman --noconfirm -S libreadline-devel vim libffi openssl
        - name: Build
          run: make release
        - name: Test
          run: make test
        - run: mv tpl tpl.exe
        - name: Upload artifacts
          uses: actions/upload-artifact@v3
          with:
            name: ${{ format('tpl-{0}-{1}', runner.os, runner.arch) }}
            path: |
              tpl.exe
              LICENSE
              ATTRIBUTION

    # Roughly matches https://github.com/WebAssembly/wasi-sdk#install
    wasm:
      name: WebAssembly
      runs-on: ubuntu-latest
      env:
        WASI_VERSION: 19
        BINARYEN_VERSION: 109
        WAPM_REGISTRY_TOKEN: ${{ secrets.WAPM_REGISTRY_TOKEN }}
        WIZER_VERSION: "v1.6.0"
      steps:
        - uses: actions/checkout@v1
        - name: Set environment (1/3)
          run: |
            echo "WASI_VERSION_FULL=${WASI_VERSION}.0" >> $GITHUB_ENV
            echo "WIZER_VERSION_FULL=${WIZER_VERSION}-x86_64-linux" >> $GITHUB_ENV
            echo "RELEASE_VERSION=`git tag --points-at HEAD | head -n 1 | sed 's/^v//'`" >> $GITHUB_ENV
        - name: Set environment (2/3)
          run: |
            echo "WASI_SDK_PATH=`pwd`/wasi-sdk-${WASI_VERSION_FULL}" >> $GITHUB_ENV
            echo "WIZER=`pwd`/wizer-${WIZER_VERSION_FULL}/wizer" >> $GITHUB_ENV
        - name: Set environment (3/3)
          run: |
            echo "WASI_CC=${WASI_SDK_PATH}/bin/clang --sysroot=${WASI_SDK_PATH}/share/wasi-sysroot" >> $GITHUB_ENV
        - name: Add Homebrew to $PATH
          run: echo "/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin" >> $GITHUB_PATH
        - name: Install WASI SDK
          run: |
            wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${WASI_VERSION}/wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz
            tar xvf wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz
        - name: Install Binaryen
          run: |
            brew install binaryen
        - name: Install Wasmer
          uses: wasmerio/setup-wasmer@v1
        - name: Install Wizer
          run: |
            wget https://github.com/bytecodealliance/wizer/releases/download/${WIZER_VERSION}/wizer-${WIZER_VERSION_FULL}.tar.xz
            tar xvf wizer-${WIZER_VERSION_FULL}.tar.xz
        - name: Build
          run: |
            rm -rf ./build
            mkdir -p ./build
            make clean wasm
            mv tpl.wasm ./build
            make clean libtpl
            mv libtpl.wasm ./build
            make clean libtpl-js
            mv libtpl-js.wasm ./build
            make clean libtpl-spin
            mv ./build/*.wasm .
        - name: Test
          run: |
            echo 'wasmer --dir . tpl.wasm -- $@' > tpl
            chmod +x tpl
            make test
        - name: Upload artifacts
          uses: actions/upload-artifact@v3
          with:
            name: tpl-wasm-wasi
            path: |
              tpl.wasm
              LICENSE
              ATTRIBUTION
        - name: Upload artifacts
          uses: actions/upload-artifact@v3
          with:
            name: libtpl-wasm
            path: |
              libtpl.wasm
              LICENSE
              ATTRIBUTION
        - name: Upload artifacts
          uses: actions/upload-artifact@v3
          with:
            name: libtpl-wasm-js
            path: |
              libtpl-js.wasm
              LICENSE
              ATTRIBUTION
        - name: Upload artifacts
          uses: actions/upload-artifact@v3
          with:
            name: libtpl-wasm-spin
            path: |
              libtpl-spin.wasm
              LICENSE
              ATTRIBUTION
        # TODO: temporarily disabled, see: https://github.com/guregu/trealla/issues/11
        # - name: Publish on WAPM
        #   run: |
        #     sed -i "s/__RELEASE_VERSION__/$RELEASE_VERSION/" wapm.toml
        #     wapm login $WAPM_REGISTRY_TOKEN
        #     wapm publish || echo "Warning: WAPM publish failed"
        #   if: ${{ env.WAPM_REGISTRY_TOKEN != '' && env.RELEASE_VERSION != '' }}

    release:
      if: github.event_name == 'release' && github.event.action == 'created'
      needs: [build, windows, wasm]
      name: Release binaries
      runs-on: ubuntu-latest
      steps:
        - name: Download artifacts
          uses: actions/download-artifact@v3
          with:
            path: artifacts
        - name: Display structure of downloaded files
          run: ls -R
        - name: Zip releases
          run: |
            cd artifacts
            chmod +x */tpl* */*.wasm
            for i in */; do
              dir=${i%/}
              lower=${dir,,}
              if [ "$dir" != "$lower" ]
              then
                mv "$dir" "${dir,,}"
              fi
            done
            find . -maxdepth 1 -mindepth 1 -type d -exec tar czf {}.tar.gz {} \;
        - name: Publish
          uses: skx/github-action-publish-binaries@master
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            args: 'artifacts/*.tar.gz'
